/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace INexusInterface {
  export type ValidatorStruct = {
    pubKey: BytesLike;
    withdrawalAddress: BytesLike;
    signature: BytesLike;
    depositRoot: BytesLike;
  };

  export type ValidatorStructOutput = [
    pubKey: string,
    withdrawalAddress: string,
    signature: string,
    depositRoot: string
  ] & {
    pubKey: string;
    withdrawalAddress: string;
    signature: string;
    depositRoot: string;
  };

  export type ValidatorSharesStruct = {
    pubKey: BytesLike;
    operatorIds: BigNumberish[];
    sharesEncrypted: BytesLike;
    amount: BigNumberish;
    cluster: ISSVNetworkCore.ClusterStruct;
  };

  export type ValidatorSharesStructOutput = [
    pubKey: string,
    operatorIds: bigint[],
    sharesEncrypted: string,
    amount: bigint,
    cluster: ISSVNetworkCore.ClusterStructOutput
  ] & {
    pubKey: string;
    operatorIds: bigint[];
    sharesEncrypted: string;
    amount: bigint;
    cluster: ISSVNetworkCore.ClusterStructOutput;
  };

  export type RollupRewardUpdateStruct = {
    rollupAdmin: AddressLike;
    amount: BigNumberish;
    slashing: boolean;
  };

  export type RollupRewardUpdateStructOutput = [
    rollupAdmin: string,
    amount: bigint,
    slashing: boolean
  ] & { rollupAdmin: string; amount: bigint; slashing: boolean };
}

export declare namespace ISSVNetworkCore {
  export type ClusterStruct = {
    validatorCount: BigNumberish;
    networkFeeIndex: BigNumberish;
    index: BigNumberish;
    active: boolean;
    balance: BigNumberish;
  };

  export type ClusterStructOutput = [
    validatorCount: bigint,
    networkFeeIndex: bigint,
    index: bigint,
    active: boolean,
    balance: bigint
  ] & {
    validatorCount: bigint;
    networkFeeIndex: bigint;
    index: bigint;
    active: boolean;
    balance: bigint;
  };
}

export interface NexusInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "activePubkeys"
      | "addCluster"
      | "changeStakingLimit"
      | "depositValidatorRollup"
      | "depositValidatorShares"
      | "depositingPubkeys"
      | "getCluster"
      | "getOwner"
      | "initialize"
      | "isRollupWhitelisted"
      | "offChainBot"
      | "proxiableUUID"
      | "rechargeCluster"
      | "rechargeSSV"
      | "registerRollup"
      | "rollups"
      | "setOffChainBot"
      | "transferOwnership"
      | "updateBridgeRewards"
      | "updateProxy"
      | "validatorExit"
      | "whitelistRollup"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClusterAdded"
      | "ClusterRecharged"
      | "OwnerChanged"
      | "RollupRegistered"
      | "RollupRewardsUpdated"
      | "RollupWhitelisted"
      | "SSVRecharged"
      | "StakingLimitChanged"
      | "ValidatorExited"
      | "ValidatorShareSubmitted"
      | "ValidatorSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "activePubkeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addCluster",
    values: [BigNumberish[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "changeStakingLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositValidatorRollup",
    values: [AddressLike, INexusInterface.ValidatorStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositValidatorShares",
    values: [AddressLike, INexusInterface.ValidatorSharesStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "depositingPubkeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCluster",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isRollupWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "offChainBot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rechargeCluster",
    values: [BigNumberish, BigNumberish, ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "rechargeSSV",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRollup",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollups",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOffChainBot",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateBridgeRewards",
    values: [INexusInterface.RollupRewardUpdateStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProxy",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validatorExit",
    values: [AddressLike, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistRollup",
    values: [string, AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "activePubkeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addCluster", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeStakingLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositValidatorRollup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositValidatorShares",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositingPubkeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getCluster", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRollupWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "offChainBot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rechargeCluster",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rechargeSSV",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRollup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rollups", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOffChainBot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBridgeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProxy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validatorExit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistRollup",
    data: BytesLike
  ): Result;
}

export namespace ClusterAddedEvent {
  export type InputTuple = [
    clusterId: BigNumberish,
    operatorIds: BigNumberish[]
  ];
  export type OutputTuple = [clusterId: bigint, operatorIds: bigint[]];
  export interface OutputObject {
    clusterId: bigint;
    operatorIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClusterRechargedEvent {
  export type InputTuple = [clusterId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [clusterId: bigint, amount: bigint];
  export interface OutputObject {
    clusterId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerChangedEvent {
  export type InputTuple = [oldOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [oldOwner: string, newOwner: string];
  export interface OutputObject {
    oldOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollupRegisteredEvent {
  export type InputTuple = [
    rollupAdmin: AddressLike,
    withdrawalAddress: AddressLike,
    stakingLimit: BigNumberish,
    operatorCluster: BigNumberish
  ];
  export type OutputTuple = [
    rollupAdmin: string,
    withdrawalAddress: string,
    stakingLimit: bigint,
    operatorCluster: bigint
  ];
  export interface OutputObject {
    rollupAdmin: string;
    withdrawalAddress: string;
    stakingLimit: bigint;
    operatorCluster: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollupRewardsUpdatedEvent {
  export type InputTuple = [
    admin: AddressLike,
    amount: BigNumberish,
    slashing: boolean
  ];
  export type OutputTuple = [admin: string, amount: bigint, slashing: boolean];
  export interface OutputObject {
    admin: string;
    amount: bigint;
    slashing: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollupWhitelistedEvent {
  export type InputTuple = [name: string, rollupAddress: AddressLike];
  export type OutputTuple = [name: string, rollupAddress: string];
  export interface OutputObject {
    name: string;
    rollupAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SSVRechargedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingLimitChangedEvent {
  export type InputTuple = [
    rollupAdmin: AddressLike,
    oldStakingLimit: BigNumberish,
    newStakingLimit: BigNumberish
  ];
  export type OutputTuple = [
    rollupAdmin: string,
    oldStakingLimit: bigint,
    newStakingLimit: bigint
  ];
  export interface OutputObject {
    rollupAdmin: string;
    oldStakingLimit: bigint;
    newStakingLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorExitedEvent {
  export type InputTuple = [admin: AddressLike, pubKey: BytesLike];
  export type OutputTuple = [admin: string, pubKey: string];
  export interface OutputObject {
    admin: string;
    pubKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorShareSubmittedEvent {
  export type InputTuple = [
    pubKey: BytesLike,
    rolupAdmin: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    pubKey: string,
    rolupAdmin: string,
    amount: bigint
  ];
  export interface OutputObject {
    pubKey: string;
    rolupAdmin: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorSubmittedEvent {
  export type InputTuple = [pubKey: BytesLike, rolupAdmin: AddressLike];
  export type OutputTuple = [pubKey: string, rolupAdmin: string];
  export interface OutputObject {
    pubKey: string;
    rolupAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Nexus extends BaseContract {
  connect(runner?: ContractRunner | null): Nexus;
  waitForDeployment(): Promise<this>;

  interface: NexusInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  activePubkeys: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  addCluster: TypedContractMethod<
    [operatorIds: BigNumberish[], clusterId: BigNumberish],
    [void],
    "nonpayable"
  >;

  changeStakingLimit: TypedContractMethod<
    [newStakingLimit: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositValidatorRollup: TypedContractMethod<
    [_rollupAdmin: AddressLike, _validators: INexusInterface.ValidatorStruct[]],
    [void],
    "nonpayable"
  >;

  depositValidatorShares: TypedContractMethod<
    [
      _rollupAdmin: AddressLike,
      _validatorShare: INexusInterface.ValidatorSharesStruct
    ],
    [void],
    "nonpayable"
  >;

  depositingPubkeys: TypedContractMethod<
    [arg0: BigNumberish],
    [string],
    "view"
  >;

  getCluster: TypedContractMethod<
    [clusterId: BigNumberish],
    [bigint[]],
    "view"
  >;

  getOwner: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<[], [void], "nonpayable">;

  isRollupWhitelisted: TypedContractMethod<
    [rollupAddress: AddressLike],
    [boolean],
    "view"
  >;

  offChainBot: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  rechargeCluster: TypedContractMethod<
    [
      clusterId: BigNumberish,
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  rechargeSSV: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerRollup: TypedContractMethod<
    [
      bridgeContract: AddressLike,
      operatorCluster: BigNumberish,
      stakingLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  rollups: TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        bridgeContract: string;
        stakingLimit: bigint;
        validatorCount: bigint;
        operatorCluster: bigint;
      }
    ],
    "view"
  >;

  setOffChainBot: TypedContractMethod<
    [_botAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateBridgeRewards: TypedContractMethod<
    [rewards: INexusInterface.RollupRewardUpdateStruct[]],
    [void],
    "nonpayable"
  >;

  updateProxy: TypedContractMethod<
    [newImplemetation: AddressLike],
    [void],
    "nonpayable"
  >;

  validatorExit: TypedContractMethod<
    [rollupAdmin: AddressLike, pubkey: BytesLike[]],
    [void],
    "nonpayable"
  >;

  whitelistRollup: TypedContractMethod<
    [name: string, rollupAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "activePubkeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "addCluster"
  ): TypedContractMethod<
    [operatorIds: BigNumberish[], clusterId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeStakingLimit"
  ): TypedContractMethod<[newStakingLimit: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "depositValidatorRollup"
  ): TypedContractMethod<
    [_rollupAdmin: AddressLike, _validators: INexusInterface.ValidatorStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositValidatorShares"
  ): TypedContractMethod<
    [
      _rollupAdmin: AddressLike,
      _validatorShare: INexusInterface.ValidatorSharesStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositingPubkeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getCluster"
  ): TypedContractMethod<[clusterId: BigNumberish], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isRollupWhitelisted"
  ): TypedContractMethod<[rollupAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "offChainBot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "rechargeCluster"
  ): TypedContractMethod<
    [
      clusterId: BigNumberish,
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rechargeSSV"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "registerRollup"
  ): TypedContractMethod<
    [
      bridgeContract: AddressLike,
      operatorCluster: BigNumberish,
      stakingLimit: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rollups"
  ): TypedContractMethod<
    [arg0: AddressLike],
    [
      [string, bigint, bigint, bigint] & {
        bridgeContract: string;
        stakingLimit: bigint;
        validatorCount: bigint;
        operatorCluster: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setOffChainBot"
  ): TypedContractMethod<[_botAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBridgeRewards"
  ): TypedContractMethod<
    [rewards: INexusInterface.RollupRewardUpdateStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProxy"
  ): TypedContractMethod<[newImplemetation: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validatorExit"
  ): TypedContractMethod<
    [rollupAdmin: AddressLike, pubkey: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistRollup"
  ): TypedContractMethod<
    [name: string, rollupAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClusterAdded"
  ): TypedContractEvent<
    ClusterAddedEvent.InputTuple,
    ClusterAddedEvent.OutputTuple,
    ClusterAddedEvent.OutputObject
  >;
  getEvent(
    key: "ClusterRecharged"
  ): TypedContractEvent<
    ClusterRechargedEvent.InputTuple,
    ClusterRechargedEvent.OutputTuple,
    ClusterRechargedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerChanged"
  ): TypedContractEvent<
    OwnerChangedEvent.InputTuple,
    OwnerChangedEvent.OutputTuple,
    OwnerChangedEvent.OutputObject
  >;
  getEvent(
    key: "RollupRegistered"
  ): TypedContractEvent<
    RollupRegisteredEvent.InputTuple,
    RollupRegisteredEvent.OutputTuple,
    RollupRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RollupRewardsUpdated"
  ): TypedContractEvent<
    RollupRewardsUpdatedEvent.InputTuple,
    RollupRewardsUpdatedEvent.OutputTuple,
    RollupRewardsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RollupWhitelisted"
  ): TypedContractEvent<
    RollupWhitelistedEvent.InputTuple,
    RollupWhitelistedEvent.OutputTuple,
    RollupWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "SSVRecharged"
  ): TypedContractEvent<
    SSVRechargedEvent.InputTuple,
    SSVRechargedEvent.OutputTuple,
    SSVRechargedEvent.OutputObject
  >;
  getEvent(
    key: "StakingLimitChanged"
  ): TypedContractEvent<
    StakingLimitChangedEvent.InputTuple,
    StakingLimitChangedEvent.OutputTuple,
    StakingLimitChangedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorExited"
  ): TypedContractEvent<
    ValidatorExitedEvent.InputTuple,
    ValidatorExitedEvent.OutputTuple,
    ValidatorExitedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorShareSubmitted"
  ): TypedContractEvent<
    ValidatorShareSubmittedEvent.InputTuple,
    ValidatorShareSubmittedEvent.OutputTuple,
    ValidatorShareSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorSubmitted"
  ): TypedContractEvent<
    ValidatorSubmittedEvent.InputTuple,
    ValidatorSubmittedEvent.OutputTuple,
    ValidatorSubmittedEvent.OutputObject
  >;

  filters: {
    "ClusterAdded(uint64,uint64[])": TypedContractEvent<
      ClusterAddedEvent.InputTuple,
      ClusterAddedEvent.OutputTuple,
      ClusterAddedEvent.OutputObject
    >;
    ClusterAdded: TypedContractEvent<
      ClusterAddedEvent.InputTuple,
      ClusterAddedEvent.OutputTuple,
      ClusterAddedEvent.OutputObject
    >;

    "ClusterRecharged(uint64,uint256)": TypedContractEvent<
      ClusterRechargedEvent.InputTuple,
      ClusterRechargedEvent.OutputTuple,
      ClusterRechargedEvent.OutputObject
    >;
    ClusterRecharged: TypedContractEvent<
      ClusterRechargedEvent.InputTuple,
      ClusterRechargedEvent.OutputTuple,
      ClusterRechargedEvent.OutputObject
    >;

    "OwnerChanged(address,address)": TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;
    OwnerChanged: TypedContractEvent<
      OwnerChangedEvent.InputTuple,
      OwnerChangedEvent.OutputTuple,
      OwnerChangedEvent.OutputObject
    >;

    "RollupRegistered(address,address,uint16,uint32)": TypedContractEvent<
      RollupRegisteredEvent.InputTuple,
      RollupRegisteredEvent.OutputTuple,
      RollupRegisteredEvent.OutputObject
    >;
    RollupRegistered: TypedContractEvent<
      RollupRegisteredEvent.InputTuple,
      RollupRegisteredEvent.OutputTuple,
      RollupRegisteredEvent.OutputObject
    >;

    "RollupRewardsUpdated(address,uint256,bool)": TypedContractEvent<
      RollupRewardsUpdatedEvent.InputTuple,
      RollupRewardsUpdatedEvent.OutputTuple,
      RollupRewardsUpdatedEvent.OutputObject
    >;
    RollupRewardsUpdated: TypedContractEvent<
      RollupRewardsUpdatedEvent.InputTuple,
      RollupRewardsUpdatedEvent.OutputTuple,
      RollupRewardsUpdatedEvent.OutputObject
    >;

    "RollupWhitelisted(string,address)": TypedContractEvent<
      RollupWhitelistedEvent.InputTuple,
      RollupWhitelistedEvent.OutputTuple,
      RollupWhitelistedEvent.OutputObject
    >;
    RollupWhitelisted: TypedContractEvent<
      RollupWhitelistedEvent.InputTuple,
      RollupWhitelistedEvent.OutputTuple,
      RollupWhitelistedEvent.OutputObject
    >;

    "SSVRecharged(address,uint256)": TypedContractEvent<
      SSVRechargedEvent.InputTuple,
      SSVRechargedEvent.OutputTuple,
      SSVRechargedEvent.OutputObject
    >;
    SSVRecharged: TypedContractEvent<
      SSVRechargedEvent.InputTuple,
      SSVRechargedEvent.OutputTuple,
      SSVRechargedEvent.OutputObject
    >;

    "StakingLimitChanged(address,uint16,uint16)": TypedContractEvent<
      StakingLimitChangedEvent.InputTuple,
      StakingLimitChangedEvent.OutputTuple,
      StakingLimitChangedEvent.OutputObject
    >;
    StakingLimitChanged: TypedContractEvent<
      StakingLimitChangedEvent.InputTuple,
      StakingLimitChangedEvent.OutputTuple,
      StakingLimitChangedEvent.OutputObject
    >;

    "ValidatorExited(address,bytes)": TypedContractEvent<
      ValidatorExitedEvent.InputTuple,
      ValidatorExitedEvent.OutputTuple,
      ValidatorExitedEvent.OutputObject
    >;
    ValidatorExited: TypedContractEvent<
      ValidatorExitedEvent.InputTuple,
      ValidatorExitedEvent.OutputTuple,
      ValidatorExitedEvent.OutputObject
    >;

    "ValidatorShareSubmitted(bytes,address,uint256)": TypedContractEvent<
      ValidatorShareSubmittedEvent.InputTuple,
      ValidatorShareSubmittedEvent.OutputTuple,
      ValidatorShareSubmittedEvent.OutputObject
    >;
    ValidatorShareSubmitted: TypedContractEvent<
      ValidatorShareSubmittedEvent.InputTuple,
      ValidatorShareSubmittedEvent.OutputTuple,
      ValidatorShareSubmittedEvent.OutputObject
    >;

    "ValidatorSubmitted(bytes,address)": TypedContractEvent<
      ValidatorSubmittedEvent.InputTuple,
      ValidatorSubmittedEvent.OutputTuple,
      ValidatorSubmittedEvent.OutputObject
    >;
    ValidatorSubmitted: TypedContractEvent<
      ValidatorSubmittedEvent.InputTuple,
      ValidatorSubmittedEvent.OutputTuple,
      ValidatorSubmittedEvent.OutputObject
    >;
  };
}

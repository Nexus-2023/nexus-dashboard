/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "BridgeContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeContract__factory>;
    getContractFactory(
      name: "SSVToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVToken__factory>;
    getContractFactory(
      name: "IDepositContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDepositContract__factory>;
    getContractFactory(
      name: "INexusBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INexusBridge__factory>;
    getContractFactory(
      name: "INexusInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INexusInterface__factory>;
    getContractFactory(
      name: "ISSVNetworkCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISSVNetworkCore__factory>;
    getContractFactory(
      name: "Nexus",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Nexus__factory>;
    getContractFactory(
      name: "NexusBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NexusBridge__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxiable__factory>;
    getContractFactory(
      name: "Withdraw",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Withdraw__factory>;

    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "BridgeContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeContract>;
    getContractAt(
      name: "SSVToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVToken>;
    getContractAt(
      name: "IDepositContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IDepositContract>;
    getContractAt(
      name: "INexusBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INexusBridge>;
    getContractAt(
      name: "INexusInterface",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.INexusInterface>;
    getContractAt(
      name: "ISSVNetworkCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISSVNetworkCore>;
    getContractAt(
      name: "Nexus",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Nexus>;
    getContractAt(
      name: "NexusBridge",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.NexusBridge>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Proxy",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "Proxiable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxiable>;
    getContractAt(
      name: "Withdraw",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Withdraw>;

    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "BridgeContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeContract>;
    deployContract(
      name: "SSVToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVToken>;
    deployContract(
      name: "IDepositContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDepositContract>;
    deployContract(
      name: "INexusBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INexusBridge>;
    deployContract(
      name: "INexusInterface",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INexusInterface>;
    deployContract(
      name: "ISSVNetworkCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVNetworkCore>;
    deployContract(
      name: "Nexus",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Nexus>;
    deployContract(
      name: "NexusBridge",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NexusBridge>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "Proxiable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxiable>;
    deployContract(
      name: "Withdraw",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Withdraw>;

    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "BridgeContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BridgeContract>;
    deployContract(
      name: "SSVToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVToken>;
    deployContract(
      name: "IDepositContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IDepositContract>;
    deployContract(
      name: "INexusBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INexusBridge>;
    deployContract(
      name: "INexusInterface",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.INexusInterface>;
    deployContract(
      name: "ISSVNetworkCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVNetworkCore>;
    deployContract(
      name: "Nexus",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Nexus>;
    deployContract(
      name: "NexusBridge",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.NexusBridge>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "Proxy",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxy>;
    deployContract(
      name: "Proxiable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Proxiable>;
    deployContract(
      name: "Withdraw",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Withdraw>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface WithdrawInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "BASIS_POINT"
      | "DAO_ADDRESS"
      | "NEXUS_CONTRACT"
      | "NEXUS_FEE_CONTRACT"
      | "amountSlashed"
      | "exitInitiated"
      | "exitingPubkeys"
      | "minimumSlashedAmount"
      | "nexusShare"
      | "slashing"
      | "updateNexusRewards"
      | "withdrawRewards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExitingValidatorAdded"
      | "NexusRewardSent"
      | "NexusShareUpdated"
      | "RollupRewardSent"
      | "SlashingAmountUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "BASIS_POINT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DAO_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NEXUS_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "NEXUS_FEE_CONTRACT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountSlashed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exitInitiated",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "exitingPubkeys",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumSlashedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nexusShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "slashing",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNexusRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRewards",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "BASIS_POINT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DAO_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NEXUS_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "NEXUS_FEE_CONTRACT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountSlashed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitInitiated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitingPubkeys",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumSlashedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nexusShare", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "slashing", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateNexusRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRewards",
    data: BytesLike
  ): Result;
}

export namespace ExitingValidatorAddedEvent {
  export type InputTuple = [publicKey: BytesLike];
  export type OutputTuple = [publicKey: string];
  export interface OutputObject {
    publicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NexusRewardSentEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NexusShareUpdatedEvent {
  export type InputTuple = [newShare: BigNumberish];
  export type OutputTuple = [newShare: bigint];
  export interface OutputObject {
    newShare: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollupRewardSentEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SlashingAmountUpdatedEvent {
  export type InputTuple = [amount: BigNumberish];
  export type OutputTuple = [amount: bigint];
  export interface OutputObject {
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Withdraw extends BaseContract {
  connect(runner?: ContractRunner | null): Withdraw;
  waitForDeployment(): Promise<this>;

  interface: WithdrawInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  BASIS_POINT: TypedContractMethod<[], [bigint], "view">;

  DAO_ADDRESS: TypedContractMethod<[], [string], "view">;

  NEXUS_CONTRACT: TypedContractMethod<[], [string], "view">;

  NEXUS_FEE_CONTRACT: TypedContractMethod<[], [string], "view">;

  amountSlashed: TypedContractMethod<[], [bigint], "view">;

  exitInitiated: TypedContractMethod<
    [pubkeys: BytesLike[]],
    [void],
    "nonpayable"
  >;

  exitingPubkeys: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  minimumSlashedAmount: TypedContractMethod<[], [bigint], "view">;

  nexusShare: TypedContractMethod<[], [bigint], "view">;

  slashing: TypedContractMethod<
    [slashingAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateNexusRewards: TypedContractMethod<
    [_newFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawRewards: TypedContractMethod<
    [pubkeys: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "BASIS_POINT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "DAO_ADDRESS"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NEXUS_CONTRACT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NEXUS_FEE_CONTRACT"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "amountSlashed"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "exitInitiated"
  ): TypedContractMethod<[pubkeys: BytesLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exitingPubkeys"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "minimumSlashedAmount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "nexusShare"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "slashing"
  ): TypedContractMethod<[slashingAmount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateNexusRewards"
  ): TypedContractMethod<[_newFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawRewards"
  ): TypedContractMethod<[pubkeys: BytesLike[]], [void], "nonpayable">;

  getEvent(
    key: "ExitingValidatorAdded"
  ): TypedContractEvent<
    ExitingValidatorAddedEvent.InputTuple,
    ExitingValidatorAddedEvent.OutputTuple,
    ExitingValidatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "NexusRewardSent"
  ): TypedContractEvent<
    NexusRewardSentEvent.InputTuple,
    NexusRewardSentEvent.OutputTuple,
    NexusRewardSentEvent.OutputObject
  >;
  getEvent(
    key: "NexusShareUpdated"
  ): TypedContractEvent<
    NexusShareUpdatedEvent.InputTuple,
    NexusShareUpdatedEvent.OutputTuple,
    NexusShareUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RollupRewardSent"
  ): TypedContractEvent<
    RollupRewardSentEvent.InputTuple,
    RollupRewardSentEvent.OutputTuple,
    RollupRewardSentEvent.OutputObject
  >;
  getEvent(
    key: "SlashingAmountUpdated"
  ): TypedContractEvent<
    SlashingAmountUpdatedEvent.InputTuple,
    SlashingAmountUpdatedEvent.OutputTuple,
    SlashingAmountUpdatedEvent.OutputObject
  >;

  filters: {
    "ExitingValidatorAdded(bytes)": TypedContractEvent<
      ExitingValidatorAddedEvent.InputTuple,
      ExitingValidatorAddedEvent.OutputTuple,
      ExitingValidatorAddedEvent.OutputObject
    >;
    ExitingValidatorAdded: TypedContractEvent<
      ExitingValidatorAddedEvent.InputTuple,
      ExitingValidatorAddedEvent.OutputTuple,
      ExitingValidatorAddedEvent.OutputObject
    >;

    "NexusRewardSent(uint256)": TypedContractEvent<
      NexusRewardSentEvent.InputTuple,
      NexusRewardSentEvent.OutputTuple,
      NexusRewardSentEvent.OutputObject
    >;
    NexusRewardSent: TypedContractEvent<
      NexusRewardSentEvent.InputTuple,
      NexusRewardSentEvent.OutputTuple,
      NexusRewardSentEvent.OutputObject
    >;

    "NexusShareUpdated(uint32)": TypedContractEvent<
      NexusShareUpdatedEvent.InputTuple,
      NexusShareUpdatedEvent.OutputTuple,
      NexusShareUpdatedEvent.OutputObject
    >;
    NexusShareUpdated: TypedContractEvent<
      NexusShareUpdatedEvent.InputTuple,
      NexusShareUpdatedEvent.OutputTuple,
      NexusShareUpdatedEvent.OutputObject
    >;

    "RollupRewardSent(uint256)": TypedContractEvent<
      RollupRewardSentEvent.InputTuple,
      RollupRewardSentEvent.OutputTuple,
      RollupRewardSentEvent.OutputObject
    >;
    RollupRewardSent: TypedContractEvent<
      RollupRewardSentEvent.InputTuple,
      RollupRewardSentEvent.OutputTuple,
      RollupRewardSentEvent.OutputObject
    >;

    "SlashingAmountUpdated(uint256)": TypedContractEvent<
      SlashingAmountUpdatedEvent.InputTuple,
      SlashingAmountUpdatedEvent.OutputTuple,
      SlashingAmountUpdatedEvent.OutputObject
    >;
    SlashingAmountUpdated: TypedContractEvent<
      SlashingAmountUpdatedEvent.InputTuple,
      SlashingAmountUpdatedEvent.OutputTuple,
      SlashingAmountUpdatedEvent.OutputObject
    >;
  };
}

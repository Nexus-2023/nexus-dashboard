/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace INexusInterface {
  export type ValidatorStruct = {
    pubKey: BytesLike;
    withdrawalAddress: BytesLike;
    signature: BytesLike;
    depositRoot: BytesLike;
  };

  export type ValidatorStructOutput = [
    pubKey: string,
    withdrawalAddress: string,
    signature: string,
    depositRoot: string
  ] & {
    pubKey: string;
    withdrawalAddress: string;
    signature: string;
    depositRoot: string;
  };

  export type ValidatorSharesStruct = {
    pubKey: BytesLike;
    operatorIds: BigNumberish[];
    sharesEncrypted: BytesLike;
    amount: BigNumberish;
    cluster: ISSVNetworkCore.ClusterStruct;
  };

  export type ValidatorSharesStructOutput = [
    pubKey: string,
    operatorIds: bigint[],
    sharesEncrypted: string,
    amount: bigint,
    cluster: ISSVNetworkCore.ClusterStructOutput
  ] & {
    pubKey: string;
    operatorIds: bigint[];
    sharesEncrypted: string;
    amount: bigint;
    cluster: ISSVNetworkCore.ClusterStructOutput;
  };
}

export declare namespace ISSVNetworkCore {
  export type ClusterStruct = {
    validatorCount: BigNumberish;
    networkFeeIndex: BigNumberish;
    index: BigNumberish;
    active: boolean;
    balance: BigNumberish;
  };

  export type ClusterStructOutput = [
    validatorCount: bigint,
    networkFeeIndex: bigint,
    index: bigint,
    active: boolean,
    balance: bigint
  ] & {
    validatorCount: bigint;
    networkFeeIndex: bigint;
    index: bigint;
    active: boolean;
    balance: bigint;
  };
}

export interface INexusInterfaceInterface extends Interface {
  getFunction(
    nameOrSignature: "depositValidatorRollup" | "depositValidatorShares"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClusterAdded"
      | "ClusterRecharged"
      | "RollupRegistered"
      | "RollupRewardsUpdated"
      | "RollupWhitelisted"
      | "SSVRecharged"
      | "StakingLimitChanged"
      | "ValidatorExited"
      | "ValidatorShareSubmitted"
      | "ValidatorSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "depositValidatorRollup",
    values: [AddressLike, INexusInterface.ValidatorStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositValidatorShares",
    values: [AddressLike, INexusInterface.ValidatorSharesStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositValidatorRollup",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositValidatorShares",
    data: BytesLike
  ): Result;
}

export namespace ClusterAddedEvent {
  export type InputTuple = [
    clusterId: BigNumberish,
    operatorIds: BigNumberish[]
  ];
  export type OutputTuple = [clusterId: bigint, operatorIds: bigint[]];
  export interface OutputObject {
    clusterId: bigint;
    operatorIds: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClusterRechargedEvent {
  export type InputTuple = [clusterId: BigNumberish, amount: BigNumberish];
  export type OutputTuple = [clusterId: bigint, amount: bigint];
  export interface OutputObject {
    clusterId: bigint;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollupRegisteredEvent {
  export type InputTuple = [
    rollupAdmin: AddressLike,
    withdrawalAddress: AddressLike,
    stakingLimit: BigNumberish,
    operatorCluster: BigNumberish
  ];
  export type OutputTuple = [
    rollupAdmin: string,
    withdrawalAddress: string,
    stakingLimit: bigint,
    operatorCluster: bigint
  ];
  export interface OutputObject {
    rollupAdmin: string;
    withdrawalAddress: string;
    stakingLimit: bigint;
    operatorCluster: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollupRewardsUpdatedEvent {
  export type InputTuple = [
    admin: AddressLike,
    amount: BigNumberish,
    slashing: boolean
  ];
  export type OutputTuple = [admin: string, amount: bigint, slashing: boolean];
  export interface OutputObject {
    admin: string;
    amount: bigint;
    slashing: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RollupWhitelistedEvent {
  export type InputTuple = [name: string, rollupAddress: AddressLike];
  export type OutputTuple = [name: string, rollupAddress: string];
  export interface OutputObject {
    name: string;
    rollupAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SSVRechargedEvent {
  export type InputTuple = [sender: AddressLike, amount: BigNumberish];
  export type OutputTuple = [sender: string, amount: bigint];
  export interface OutputObject {
    sender: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakingLimitChangedEvent {
  export type InputTuple = [
    rollupAdmin: AddressLike,
    oldStakingLimit: BigNumberish,
    newStakingLimit: BigNumberish
  ];
  export type OutputTuple = [
    rollupAdmin: string,
    oldStakingLimit: bigint,
    newStakingLimit: bigint
  ];
  export interface OutputObject {
    rollupAdmin: string;
    oldStakingLimit: bigint;
    newStakingLimit: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorExitedEvent {
  export type InputTuple = [admin: AddressLike, pubKey: BytesLike];
  export type OutputTuple = [admin: string, pubKey: string];
  export interface OutputObject {
    admin: string;
    pubKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorShareSubmittedEvent {
  export type InputTuple = [
    pubKey: BytesLike,
    rolupAdmin: AddressLike,
    amount: BigNumberish
  ];
  export type OutputTuple = [
    pubKey: string,
    rolupAdmin: string,
    amount: bigint
  ];
  export interface OutputObject {
    pubKey: string;
    rolupAdmin: string;
    amount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorSubmittedEvent {
  export type InputTuple = [pubKey: BytesLike, rolupAdmin: AddressLike];
  export type OutputTuple = [pubKey: string, rolupAdmin: string];
  export interface OutputObject {
    pubKey: string;
    rolupAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface INexusInterface extends BaseContract {
  connect(runner?: ContractRunner | null): INexusInterface;
  waitForDeployment(): Promise<this>;

  interface: INexusInterfaceInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositValidatorRollup: TypedContractMethod<
    [_rollupAdmin: AddressLike, _validators: INexusInterface.ValidatorStruct[]],
    [void],
    "nonpayable"
  >;

  depositValidatorShares: TypedContractMethod<
    [
      _rollupAdmin: AddressLike,
      _validatorShare: INexusInterface.ValidatorSharesStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositValidatorRollup"
  ): TypedContractMethod<
    [_rollupAdmin: AddressLike, _validators: INexusInterface.ValidatorStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositValidatorShares"
  ): TypedContractMethod<
    [
      _rollupAdmin: AddressLike,
      _validatorShare: INexusInterface.ValidatorSharesStruct
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClusterAdded"
  ): TypedContractEvent<
    ClusterAddedEvent.InputTuple,
    ClusterAddedEvent.OutputTuple,
    ClusterAddedEvent.OutputObject
  >;
  getEvent(
    key: "ClusterRecharged"
  ): TypedContractEvent<
    ClusterRechargedEvent.InputTuple,
    ClusterRechargedEvent.OutputTuple,
    ClusterRechargedEvent.OutputObject
  >;
  getEvent(
    key: "RollupRegistered"
  ): TypedContractEvent<
    RollupRegisteredEvent.InputTuple,
    RollupRegisteredEvent.OutputTuple,
    RollupRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "RollupRewardsUpdated"
  ): TypedContractEvent<
    RollupRewardsUpdatedEvent.InputTuple,
    RollupRewardsUpdatedEvent.OutputTuple,
    RollupRewardsUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RollupWhitelisted"
  ): TypedContractEvent<
    RollupWhitelistedEvent.InputTuple,
    RollupWhitelistedEvent.OutputTuple,
    RollupWhitelistedEvent.OutputObject
  >;
  getEvent(
    key: "SSVRecharged"
  ): TypedContractEvent<
    SSVRechargedEvent.InputTuple,
    SSVRechargedEvent.OutputTuple,
    SSVRechargedEvent.OutputObject
  >;
  getEvent(
    key: "StakingLimitChanged"
  ): TypedContractEvent<
    StakingLimitChangedEvent.InputTuple,
    StakingLimitChangedEvent.OutputTuple,
    StakingLimitChangedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorExited"
  ): TypedContractEvent<
    ValidatorExitedEvent.InputTuple,
    ValidatorExitedEvent.OutputTuple,
    ValidatorExitedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorShareSubmitted"
  ): TypedContractEvent<
    ValidatorShareSubmittedEvent.InputTuple,
    ValidatorShareSubmittedEvent.OutputTuple,
    ValidatorShareSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorSubmitted"
  ): TypedContractEvent<
    ValidatorSubmittedEvent.InputTuple,
    ValidatorSubmittedEvent.OutputTuple,
    ValidatorSubmittedEvent.OutputObject
  >;

  filters: {
    "ClusterAdded(uint64,uint64[])": TypedContractEvent<
      ClusterAddedEvent.InputTuple,
      ClusterAddedEvent.OutputTuple,
      ClusterAddedEvent.OutputObject
    >;
    ClusterAdded: TypedContractEvent<
      ClusterAddedEvent.InputTuple,
      ClusterAddedEvent.OutputTuple,
      ClusterAddedEvent.OutputObject
    >;

    "ClusterRecharged(uint64,uint256)": TypedContractEvent<
      ClusterRechargedEvent.InputTuple,
      ClusterRechargedEvent.OutputTuple,
      ClusterRechargedEvent.OutputObject
    >;
    ClusterRecharged: TypedContractEvent<
      ClusterRechargedEvent.InputTuple,
      ClusterRechargedEvent.OutputTuple,
      ClusterRechargedEvent.OutputObject
    >;

    "RollupRegistered(address,address,uint16,uint32)": TypedContractEvent<
      RollupRegisteredEvent.InputTuple,
      RollupRegisteredEvent.OutputTuple,
      RollupRegisteredEvent.OutputObject
    >;
    RollupRegistered: TypedContractEvent<
      RollupRegisteredEvent.InputTuple,
      RollupRegisteredEvent.OutputTuple,
      RollupRegisteredEvent.OutputObject
    >;

    "RollupRewardsUpdated(address,uint256,bool)": TypedContractEvent<
      RollupRewardsUpdatedEvent.InputTuple,
      RollupRewardsUpdatedEvent.OutputTuple,
      RollupRewardsUpdatedEvent.OutputObject
    >;
    RollupRewardsUpdated: TypedContractEvent<
      RollupRewardsUpdatedEvent.InputTuple,
      RollupRewardsUpdatedEvent.OutputTuple,
      RollupRewardsUpdatedEvent.OutputObject
    >;

    "RollupWhitelisted(string,address)": TypedContractEvent<
      RollupWhitelistedEvent.InputTuple,
      RollupWhitelistedEvent.OutputTuple,
      RollupWhitelistedEvent.OutputObject
    >;
    RollupWhitelisted: TypedContractEvent<
      RollupWhitelistedEvent.InputTuple,
      RollupWhitelistedEvent.OutputTuple,
      RollupWhitelistedEvent.OutputObject
    >;

    "SSVRecharged(address,uint256)": TypedContractEvent<
      SSVRechargedEvent.InputTuple,
      SSVRechargedEvent.OutputTuple,
      SSVRechargedEvent.OutputObject
    >;
    SSVRecharged: TypedContractEvent<
      SSVRechargedEvent.InputTuple,
      SSVRechargedEvent.OutputTuple,
      SSVRechargedEvent.OutputObject
    >;

    "StakingLimitChanged(address,uint16,uint16)": TypedContractEvent<
      StakingLimitChangedEvent.InputTuple,
      StakingLimitChangedEvent.OutputTuple,
      StakingLimitChangedEvent.OutputObject
    >;
    StakingLimitChanged: TypedContractEvent<
      StakingLimitChangedEvent.InputTuple,
      StakingLimitChangedEvent.OutputTuple,
      StakingLimitChangedEvent.OutputObject
    >;

    "ValidatorExited(address,bytes)": TypedContractEvent<
      ValidatorExitedEvent.InputTuple,
      ValidatorExitedEvent.OutputTuple,
      ValidatorExitedEvent.OutputObject
    >;
    ValidatorExited: TypedContractEvent<
      ValidatorExitedEvent.InputTuple,
      ValidatorExitedEvent.OutputTuple,
      ValidatorExitedEvent.OutputObject
    >;

    "ValidatorShareSubmitted(bytes,address,uint256)": TypedContractEvent<
      ValidatorShareSubmittedEvent.InputTuple,
      ValidatorShareSubmittedEvent.OutputTuple,
      ValidatorShareSubmittedEvent.OutputObject
    >;
    ValidatorShareSubmitted: TypedContractEvent<
      ValidatorShareSubmittedEvent.InputTuple,
      ValidatorShareSubmittedEvent.OutputTuple,
      ValidatorShareSubmittedEvent.OutputObject
    >;

    "ValidatorSubmitted(bytes,address)": TypedContractEvent<
      ValidatorSubmittedEvent.InputTuple,
      ValidatorSubmittedEvent.OutputTuple,
      ValidatorSubmittedEvent.OutputObject
    >;
    ValidatorSubmitted: TypedContractEvent<
      ValidatorSubmittedEvent.InputTuple,
      ValidatorSubmittedEvent.OutputTuple,
      ValidatorSubmittedEvent.OutputObject
    >;
  };
}

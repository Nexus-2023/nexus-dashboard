/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ISSVNetworkCore {
  export type ClusterStruct = {
    validatorCount: BigNumberish;
    networkFeeIndex: BigNumberish;
    index: BigNumberish;
    active: boolean;
    balance: BigNumberish;
  };

  export type ClusterStructOutput = [
    validatorCount: bigint,
    networkFeeIndex: bigint,
    index: bigint,
    active: boolean,
    balance: bigint
  ] & {
    validatorCount: bigint;
    networkFeeIndex: bigint;
    index: bigint;
    active: boolean;
    balance: bigint;
  };
}

export interface ISSVNetworkCoreInterface extends Interface {
  getFunction(
    nameOrSignature: "deposit" | "registerValidator" | "removeValidator"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      AddressLike,
      BigNumberish[],
      BigNumberish,
      ISSVNetworkCore.ClusterStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerValidator",
    values: [
      BytesLike,
      BigNumberish[],
      BytesLike,
      BigNumberish,
      ISSVNetworkCore.ClusterStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [BytesLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;

  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
}

export interface ISSVNetworkCore extends BaseContract {
  connect(runner?: ContractRunner | null): ISSVNetworkCore;
  waitForDeployment(): Promise<this>;

  interface: ISSVNetworkCoreInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deposit: TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  registerValidator: TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      sharesEncrypted: BytesLike,
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  removeValidator: TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerValidator"
  ): TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      sharesEncrypted: BytesLike,
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeValidator"
  ): TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  filters: {};
}

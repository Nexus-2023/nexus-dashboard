/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace INexusInterface {
  export type ValidatorStruct = {
    pubKey: BytesLike;
    withdrawalAddress: BytesLike;
    signature: BytesLike;
    depositRoot: BytesLike;
  };

  export type ValidatorStructOutput = [
    pubKey: string,
    withdrawalAddress: string,
    signature: string,
    depositRoot: string
  ] & {
    pubKey: string;
    withdrawalAddress: string;
    signature: string;
    depositRoot: string;
  };
}

export interface INexusBridgeInterface extends Interface {
  getFunction(
    nameOrSignature: "depositValidatorNexus" | "updateRewards"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "RewardsRedeemed" | "RewardsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "depositValidatorNexus",
    values: [INexusInterface.ValidatorStruct[], BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRewards",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "depositValidatorNexus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateRewards",
    data: BytesLike
  ): Result;
}

export namespace RewardsRedeemedEvent {
  export type InputTuple = [amount: BigNumberish, rewardReceiver: AddressLike];
  export type OutputTuple = [amount: bigint, rewardReceiver: string];
  export interface OutputObject {
    amount: bigint;
    rewardReceiver: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsUpdatedEvent {
  export type InputTuple = [amount: BigNumberish, slashing: boolean];
  export type OutputTuple = [amount: bigint, slashing: boolean];
  export interface OutputObject {
    amount: bigint;
    slashing: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface INexusBridge extends BaseContract {
  connect(runner?: ContractRunner | null): INexusBridge;
  waitForDeployment(): Promise<this>;

  interface: INexusBridgeInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  depositValidatorNexus: TypedContractMethod<
    [
      _validators: INexusInterface.ValidatorStruct[],
      stakingLimit: BigNumberish,
      validatorCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  updateRewards: TypedContractMethod<
    [amount: BigNumberish, slashed: boolean, validatorCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "depositValidatorNexus"
  ): TypedContractMethod<
    [
      _validators: INexusInterface.ValidatorStruct[],
      stakingLimit: BigNumberish,
      validatorCount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateRewards"
  ): TypedContractMethod<
    [amount: BigNumberish, slashed: boolean, validatorCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "RewardsRedeemed"
  ): TypedContractEvent<
    RewardsRedeemedEvent.InputTuple,
    RewardsRedeemedEvent.OutputTuple,
    RewardsRedeemedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsUpdated"
  ): TypedContractEvent<
    RewardsUpdatedEvent.InputTuple,
    RewardsUpdatedEvent.OutputTuple,
    RewardsUpdatedEvent.OutputObject
  >;

  filters: {
    "RewardsRedeemed(uint256,address)": TypedContractEvent<
      RewardsRedeemedEvent.InputTuple,
      RewardsRedeemedEvent.OutputTuple,
      RewardsRedeemedEvent.OutputObject
    >;
    RewardsRedeemed: TypedContractEvent<
      RewardsRedeemedEvent.InputTuple,
      RewardsRedeemedEvent.OutputTuple,
      RewardsRedeemedEvent.OutputObject
    >;

    "RewardsUpdated(uint256,bool)": TypedContractEvent<
      RewardsUpdatedEvent.InputTuple,
      RewardsUpdatedEvent.OutputTuple,
      RewardsUpdatedEvent.OutputObject
    >;
    RewardsUpdated: TypedContractEvent<
      RewardsUpdatedEvent.InputTuple,
      RewardsUpdatedEvent.OutputTuple,
      RewardsUpdatedEvent.OutputObject
    >;
  };
}

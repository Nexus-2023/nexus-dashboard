/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ISSVNetworkCore,
  ISSVNetworkCoreInterface,
} from "../../../../contracts/interfaces/ISSVNetwork.sol/ISSVNetworkCore";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "clusterOwner",
        type: "address",
      },
      {
        internalType: "uint64[]",
        name: "operatorIds",
        type: "uint64[]",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "validatorCount",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "networkFeeIndex",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "index",
            type: "uint64",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct ISSVNetworkCore.Cluster",
        name: "cluster",
        type: "tuple",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "publicKey",
        type: "bytes",
      },
      {
        internalType: "uint64[]",
        name: "operatorIds",
        type: "uint64[]",
      },
      {
        internalType: "bytes",
        name: "sharesEncrypted",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "validatorCount",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "networkFeeIndex",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "index",
            type: "uint64",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct ISSVNetworkCore.Cluster",
        name: "cluster",
        type: "tuple",
      },
    ],
    name: "registerValidator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "publicKey",
        type: "bytes",
      },
      {
        internalType: "uint64[]",
        name: "operatorIds",
        type: "uint64[]",
      },
      {
        components: [
          {
            internalType: "uint32",
            name: "validatorCount",
            type: "uint32",
          },
          {
            internalType: "uint64",
            name: "networkFeeIndex",
            type: "uint64",
          },
          {
            internalType: "uint64",
            name: "index",
            type: "uint64",
          },
          {
            internalType: "bool",
            name: "active",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "balance",
            type: "uint256",
          },
        ],
        internalType: "struct ISSVNetworkCore.Cluster",
        name: "cluster",
        type: "tuple",
      },
    ],
    name: "removeValidator",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class ISSVNetworkCore__factory {
  static readonly abi = _abi;
  static createInterface(): ISSVNetworkCoreInterface {
    return new Interface(_abi) as ISSVNetworkCoreInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ISSVNetworkCore {
    return new Contract(address, _abi, runner) as unknown as ISSVNetworkCore;
  }
}
